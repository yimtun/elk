可以使用自带的关键数据进行排序 比如
-  _count 文档数
-  _key 按照key值排序

order 可以是一个数组 
下面的示例 首先按照文档数 排序 再按照 分桶 key 的名称来排序



GET test_search_index/_search
{
  "size": 0,
  "aggs": {
    "jobs": {
      "terms": {
        "field": "job.keyword",
        "size": 10,
        "order": [
          {
            "_count": "asc"
          },
          {
            "_key": "desc"
          }
        ]
      }
    }
  }
}






asc count 升序排序










借用聚合分析中的数值进行排序 必须用子聚合分析中结果

针对salary 做一个间隔是5000的histogram 的分析  分析下面有一个子聚合  过滤出年龄大于等于10岁的  然后对年龄的平均值进行计算



首先按照5000 的间隔将 工资分桶  计算每一个桶里的平均年龄  排序的时候按照平均年龄倒排  这样就能看到平均年龄最大的 工资实在哪一个桶里面





GET test_search_index/_search
{
  "size": 0,
  "aggs": {
    "salary_hist": {
      "histogram": {
        "field": "salary",
        "interval": 5000,
        "order": {
          "age>avg_age": "desc"
        }
      },
      "aggs": {
        "age": {
          "filter": {
            "range": {
              "age": {
                "gte": 10
              }
            }
          },
          "aggs": {
            "avg_age": {
              "avg": {
                "field": "age"
              }
            }
          }
        }
      }
    }
  }
}










GET test_search_index/_search
{
  "size": 0,
  "aggs": {
    "jobs": {
      "terms": {
        "field": "job.keyword",
        "size": 10,
        "order": [
          {
            "stats_salary.sum": "desc"
          }
        ]
      },
      "aggs": {
        "stats_salary": {
          "stats": {
            "field": "salary"
          }
        }
      }
    }
  }
}










 
