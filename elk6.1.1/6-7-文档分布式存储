文档最终会存储在分片上
-Document1 最终存储在分片P1 上

document1 是如何存储到分片p1 上的 选择p1的依据是什么

-需要文档到分片的映射算法

目的
-使文档均匀分布在所有分片上 以充分利用资源

算法
-随机算则或者 round-robin 算法？
不可取 因为需要维护文档到分片的映射关系 成本巨大

根据文档值实时计算对应的分片

es通过如下公式计算文档对应的分片

- shard= hash(routing) % number_of_primary_shards
- hash 算法可以保证将数据均匀的分散在所有分片中
- routing 是一个关键参数 默认是文档id 也可以自行指定
  比如有一个论坛 论坛有非常多的帖子 希望把同一个板块的帖子
  放在一个分片上 这个时候可以使用板块的ID 作为routing 的值
  实现所有板块的帖子都在一个分片上 做查询的时候加一个routing 
  的限定条件 就只去查询这一个分片了 速度提高
- number_of_primary_shards 主分片数


该算法与主分片数相关 这也是一旦分片数确定后便不能更改的原因


文档创建流程：


node1  P0 R1
node2  P1 R2
node3  P3 RO

1 Client 向 node3 发起创建文档请求 node3 为 coordinates 角色的作用

2 node3 通过routing 计算该文档应该存储在shard1 上 查询cluster state 后确认 主分片P1
  在节点node2上 然后转发创建文档的请求到node2

3 node2 上P1 执行创建文档的请求 后  将同样的请求发送给 副本分片所在的 node1 上 的 R1


4 node1 上的R1 接收并执行创建文档的请求 后 通知P1 陈成功结果

5 P1 接收副本分片结果后 通知node3 创建成功


6 node3 返回结果到Client



文档读取流程


文档批量创建流程  bulk

文档批量读取流程  mget








